window.Aiken.initSearch([{"doc":"lasagna/curves/pasta/affine","title":"add","content":"add(curve: CurveConfig, p1: Affine, p2: Affine) -&gt; Affine\n Add two curve points: `P1 + P2`.","url":"lasagna/curves/pasta/affine.html#add"},{"doc":"lasagna/curves/pasta/affine","title":"double","content":"double(curve: CurveConfig, p: Affine) -&gt; Affine\n Double a curve point: `P + P`.","url":"lasagna/curves/pasta/affine.html#double"},{"doc":"lasagna/curves/pasta/affine","title":"is_zero","content":"is_zero(p: Affine) -&gt; Bool\n Check if a point is the zero point (the point at infinity). ","url":"lasagna/curves/pasta/affine.html#is_zero"},{"doc":"lasagna/curves/pasta/affine","title":"neg","content":"neg(curve: CurveConfig, p: Affine) -&gt; Affine\n Negate a curve point: `-P`.","url":"lasagna/curves/pasta/affine.html#neg"},{"doc":"lasagna/curves/pasta/affine","title":"on_curve","content":"on_curve(curve: CurveConfig, point: Affine) -&gt; Bool\n Check if a point is on the given curve.","url":"lasagna/curves/pasta/affine.html#on_curve"},{"doc":"lasagna/curves/pasta/affine","title":"one","content":"one(curve: CurveConfig) -&gt; Affine\n Return the generator point of the curve.","url":"lasagna/curves/pasta/affine.html#one"},{"doc":"lasagna/curves/pasta/affine","title":"scalar_mul","content":"scalar_mul(curve: CurveConfig, p: Affine, n: Int) -&gt; Affine\n Scalar multiplication: `n * P`.","url":"lasagna/curves/pasta/affine.html#scalar_mul"},{"doc":"lasagna/curves/pasta/affine","title":"zero","content":"zero() -&gt; Affine\n Return the zero point (the point at infinity).","url":"lasagna/curves/pasta/affine.html#zero"},{"doc":"lasagna/curves/pasta/affine","title":"lasagna/curves/pasta/affine","content":" Elliptic curve operations in affine coordinates.\n See https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html","url":"lasagna/curves/pasta/affine.html"},{"doc":"lasagna/curves/pasta","title":"normalize_projective","content":"normalize_projective(curve: CurveConfig, p: Projective) -&gt; Projective\n Normalize a point in projective coordinates. This means that the `z` coordinate is set to `1` for any point\n other than the point at infinity.","url":"lasagna/curves/pasta.html#normalize_projective"},{"doc":"lasagna/curves/pasta","title":"pallas","content":"pallas() -&gt; CurveConfig\n Configuration for the Pallas curve. Base field is `Fp`, scalar field is `Fq` (see `lasagna/fields.{fp, fq}`).\n The curve equation is `y^2 = x^3 + 5`.\n The generator point is `(1, 12418654782883325593414442427049395787963493412651469444558597405572177144507)`.","url":"lasagna/curves/pasta.html#pallas"},{"doc":"lasagna/curves/pasta","title":"to_affine","content":"to_affine(curve: CurveConfig, projective: Projective) -&gt; Affine\n Transform a point from projective coordinates to affine coordinates.","url":"lasagna/curves/pasta.html#to_affine"},{"doc":"lasagna/curves/pasta","title":"to_projective","content":"to_projective(affine: Affine) -&gt; Projective\n Transform a point from affine coordinates to projective coordinates.","url":"lasagna/curves/pasta.html#to_projective"},{"doc":"lasagna/curves/pasta","title":"vesta","content":"vesta() -&gt; CurveConfig\n Configuration for the Vesta curve. Base field is `Fq`, scalar field is `Fp` (see `lasagna/fields.{fp, fq}`).\n The curve equation is `y^2 = x^3 + 5`.\n The generator point is `(1, 11426906929455361843568202299992114520848200991084027513389447476559454104162)`.","url":"lasagna/curves/pasta.html#vesta"},{"doc":"lasagna/curves/pasta","title":"Affine","content":"Affine {\n  x: Int,\n  y: Int,\n  infinity: Bool,\n}\n Affine coordinates `(x, y)` representation of a curve point.\n The point at infinity is represented by `(x, y) = (0, 0)` and `infinity = True`.\nAffine { x: Int, y: Int, infinity: Bool }\n","url":"lasagna/curves/pasta.html#Affine"},{"doc":"lasagna/curves/pasta","title":"CurveConfig","content":"CurveConfig {\n  base_field: FieldConfig,\n  scalar_field: FieldConfig,\n  b: Int,\n  generator: Affine,\n}\n Curve configuration. The curve equation is `y^2 = x^3 + b`.\n\n `base_field` is the field over which the curve is defined: `x`, `y`, and `b` are elements of this field. \n\n `scalar_field` is the field over which the scalar multiplication of the curve points is defined:\n its elements are the scalars that can be used to multiply the curve points.\n\n `b` is the constant in the curve equation.\n\n `generator` is the generator point of the curve. All points on the curve can be obtained by scalar multiplication\n of this point by elements of the scalar field.\nCurveConfig {\n  base_field: FieldConfig,\n  scalar_field: FieldConfig,\n  b: Int,\n  generator: Affine,\n}\n","url":"lasagna/curves/pasta.html#CurveConfig"},{"doc":"lasagna/curves/pasta","title":"Projective","content":"Projective {\n  x: Int,\n  y: Int,\n  z: Int,\n}\n Projective (Jacobian) coordinates `(X, Y, Z)` representation of a curve point.\n Affine coordinates `(x, y)` are related to projective as `(x, y) = (X/Z^2, Y/Z^3)`.\n The point at infinity is represented by `(X, Y, Z) = (0, 1, 0)`.\nProjective { x: Int, y: Int, z: Int }\n","url":"lasagna/curves/pasta.html#Projective"},{"doc":"lasagna/curves/pasta","title":"lasagna/curves/pasta","content":" Types and helper functions for Pasta elliptic curves as described\n in https://o1-labs.github.io/proof-systems/specs/pasta.html","url":"lasagna/curves/pasta.html"},{"doc":"lasagna/fields","title":"add","content":"add(m: Int, x: Int, y: Int) -&gt; Int\n Addition in the field with modulus `m`.","url":"lasagna/fields.html#add"},{"doc":"lasagna/fields","title":"div","content":"div(m: Int, x: Int, y: Int) -&gt; Int\n Division in the field with modulus `m`.","url":"lasagna/fields.html#div"},{"doc":"lasagna/fields","title":"fp","content":"fp() -&gt; FieldConfig\n Field `Fp` with `modulus = 28948022309329048855892746252171976963363056481941560715954676764349967630337`.","url":"lasagna/fields.html#fp"},{"doc":"lasagna/fields","title":"fq","content":"fq() -&gt; FieldConfig\n Field `Fq` with `modulus = 28948022309329048855892746252171976963363056481941647379679742748393362948097`.","url":"lasagna/fields.html#fq"},{"doc":"lasagna/fields","title":"inverse","content":"inverse(m: Int, x: Int) -&gt; Int\n Multiplicative inverse of `x` in the field with modulus `m`.","url":"lasagna/fields.html#inverse"},{"doc":"lasagna/fields","title":"mul","content":"mul(m: Int, x: Int, y: Int) -&gt; Int\n Multiplication in the field with modulus `m`.","url":"lasagna/fields.html#mul"},{"doc":"lasagna/fields","title":"neg","content":"neg(m: Int, x: Int) -&gt; Int\n Negation in the field with modulus `m`.","url":"lasagna/fields.html#neg"},{"doc":"lasagna/fields","title":"pow","content":"pow(m: Int, x: Int, y: Int) -&gt; Int\n Exponentiation in the field with modulus `m`.","url":"lasagna/fields.html#pow"},{"doc":"lasagna/fields","title":"square","content":"square(m: Int, x: Int) -&gt; Int\n Squaring in the field with modulus `m`.","url":"lasagna/fields.html#square"},{"doc":"lasagna/fields","title":"sub","content":"sub(m: Int, x: Int, y: Int) -&gt; Int\n Subtraction in the field with modulus `m`.","url":"lasagna/fields.html#sub"},{"doc":"lasagna/fields","title":"FieldConfig","content":"FieldConfig {\n  modulus: Int,\n}\n Field configuration: `modulus` is the prime number that defines the field.\nFieldConfig { modulus: Int }\n","url":"lasagna/fields.html#FieldConfig"},{"doc":"lasagna/fields","title":"lasagna/fields","content":" Fields and arithmetic operations used in the Pasta curves.","url":"lasagna/fields.html"},{"doc":"lasagna/curves/pasta/projective","title":"add","content":"add(curve: CurveConfig, p1: Projective, p2: Projective) -&gt; Projective\n Add two curve points: `P1 + P2`.\n See http://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#addition-madd-2007-bl\n Assumes `Z2 == 1`.","url":"lasagna/curves/pasta/projective.html#add"},{"doc":"lasagna/curves/pasta/projective","title":"double","content":"double(curve: CurveConfig, p: Projective) -&gt; Projective\n Double a curve point: `P + P`.\n See https://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#doubling-dbl-2009-l","url":"lasagna/curves/pasta/projective.html#double"},{"doc":"lasagna/curves/pasta/projective","title":"is_zero","content":"is_zero(p: Projective) -&gt; Bool\n Check if a point is the zero point (the point at infinity).","url":"lasagna/curves/pasta/projective.html#is_zero"},{"doc":"lasagna/curves/pasta/projective","title":"neg","content":"neg(curve: CurveConfig, p: Projective) -&gt; Projective\n Negate a curve point: `-P`.","url":"lasagna/curves/pasta/projective.html#neg"},{"doc":"lasagna/curves/pasta/projective","title":"one","content":"one(curve: CurveConfig) -&gt; Projective\n Return the generator point of the curve.","url":"lasagna/curves/pasta/projective.html#one"},{"doc":"lasagna/curves/pasta/projective","title":"scalar_mul","content":"scalar_mul(curve: CurveConfig, p: Projective, n: Int) -&gt; Projective\n Scalar multiplication: `n * P`.","url":"lasagna/curves/pasta/projective.html#scalar_mul"},{"doc":"lasagna/curves/pasta/projective","title":"zero","content":"zero() -&gt; Projective\n Return the zero point (the point at infinity).","url":"lasagna/curves/pasta/projective.html#zero"},{"doc":"lasagna/curves/pasta/projective","title":"lasagna/curves/pasta/projective","content":" Elliptic curve operations in projective (Jacobian) coordinates.\n See https://www.hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html","url":"lasagna/curves/pasta/projective.html"}]);